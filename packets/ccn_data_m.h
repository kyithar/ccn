//
// Generated file, do not edit! Created by opp_msgc 4.3 from packets/ccn_data.msg.
//

#ifndef _CCN_DATA_M_H_
#define _CCN_DATA_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0403
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// cplusplus {{
#include "ccnsim.h"
// }}



/**
 * Class generated from <tt>packets/ccn_data.msg</tt> by opp_msgc.
 * <pre>
 * packet ccn_data{
 * 	@customize(true);
 * 
 * 
 * 	chunk_t chunk;
 * 
 * 
 * 
 * 	int target = -1;
 * 
 * 
 * 	int origin = -1;
 * 	int hops = 0;
 * 
 * 
 * 	int TSB = 0; 
 * 	int TSI = 0; 
 * 	double capacity = 0; 
 * 
 * 
 * 	double btw = 0;
 * 
 * 
 * 	bool found = false; 
 * }
 * </pre>
 *
 * ccn_data_Base is only useful if it gets subclassed, and ccn_data is derived from it.
 * The minimum code to be written for ccn_data is the following:
 *
 * <pre>
 * class ccn_data : public ccn_data_Base
 * {
 *   private:
 *     void copy(const ccn_data& other) { ... }

 *   public:
 *     ccn_data(const char *name=NULL, int kind=0) : ccn_data_Base(name,kind) {}
 *     ccn_data(const ccn_data& other) : ccn_data_Base(other) {copy(other);}
 *     ccn_data& operator=(const ccn_data& other) {if (this==&other) return *this; ccn_data_Base::operator=(other); copy(other); return *this;}
 *     virtual ccn_data *dup() const {return new ccn_data(*this);}
 *     // ADD CODE HERE to redefine and implement pure virtual functions from ccn_data_Base
 * };
 * </pre>
 *
 * The following should go into a .cc (.cpp) file:
 *
 * <pre>
 * Register_Class(ccn_data);
 * </pre>
 */
class ccn_data_Base : public ::cPacket
{
  protected:
    chunk_t chunk_var;
    int target_var;
    int origin_var;
    int hops_var;
    int TSB_var;
    int TSI_var;
    double capacity_var;
    double btw_var;
    bool found_var;

  private:
    void copy(const ccn_data_Base& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ccn_data_Base&);
    // make constructors protected to avoid instantiation
    ccn_data_Base(const char *name=NULL, int kind=0);
    ccn_data_Base(const ccn_data_Base& other);
    // make assignment operator protected to force the user override it
    ccn_data_Base& operator=(const ccn_data_Base& other);

  public:
    virtual ~ccn_data_Base();
    virtual ccn_data_Base *dup() const {throw cRuntimeError("You forgot to manually add a dup() function to class ccn_data");}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual chunk_t& getChunk();
    virtual const chunk_t& getChunk() const {return const_cast<ccn_data_Base*>(this)->getChunk();}
    virtual void setChunk(const chunk_t& chunk);
    virtual int getTarget() const;
    virtual void setTarget(int target);
    virtual int getOrigin() const;
    virtual void setOrigin(int origin);
    virtual int getHops() const;
    virtual void setHops(int hops);
    virtual int getTSB() const;
    virtual void setTSB(int TSB);
    virtual int getTSI() const;
    virtual void setTSI(int TSI);
    virtual double getCapacity() const;
    virtual void setCapacity(double capacity);
    virtual double getBtw() const;
    virtual void setBtw(double btw);
    virtual bool getFound() const;
    virtual void setFound(bool found);
};


#endif // _CCN_DATA_M_H_
