#General paramteters
[General]
network = networks.${net=abilene}_network
seed-set = ${rep = 0}

#####################################################################
########################  Repositories ##############################
#####################################################################
## (In the case of standard topologies, like tree or cascades, 
## repositories are placed within the corresponding ned file.
##Indicates which node is a repository (left blank for random positioning)
**.node_repos = ""
##Indecates how many repositories there are on the network
**.num_repos  = 1
##Indicates in how many (random) repositories a given content is replicated
**.replicas = 1

#####################################################################
##########################  Clients  ################################
#####################################################################
## (In the case of standard topologies, like tree or cascades, 
## clients are placed within the corresponding ned file.
##Indicates which node is a client (left blank for random positioning)
**.node_clients = ""
##Indicates how many clients there are on the network
**.num_clients = 11
##Arriva rate of each timer
**.lambda = 1
##Timer indicating that a given content is not downloaded (>> N_D*d, where N_D is the network diameter, and d is the average delay on a link)
**.RTT = 2
##Timer indicating how often checking for a given content download
**.check_time = 0.1


#####################################################################
###################  Content Distribution ###########################
#####################################################################
##Average size of  a content (in chunks)
**.file_size =  20
##Shaping factor of the Zipf distribution
**.alpha = ${a = 1}
##Plateau of the MZipf distribution
**.q = 0
##Cardinality of the catalog
**.objects = 10^4

#####################################################################
##########################  Forwarding ##############################
#####################################################################
##Strategy layer (interest forwarding): 
## - spr: send interests toward the closest repository (in terms of hop count)[comcom,techrep]
## - nrr1: nearest replica routing (one phase)
## - nrr:  nearest replica routing (two phases)
## - random_repository: send interests toward one randomly chosen repository among those which store the given chunk[comcom,techrep]
## - parallel_repository: send interests toward all the repositories which store the given chunk[comcom,techrep]
**.FS = "${ F = spr }"
**.TTL2 = ${ttl = 1000}
**.TTL1= ${ttl}
**.routing_file = ""

#####################################################################
##########################  Caching  ################################
#####################################################################
##Caching meta-algorithms: fixP, lce , no_cache , lcd, btw, prob_cache
**.DS = "${ D = lcd }"
##Caching algorithms: {lru,lfu,fifo,two,random}_cache
**.RS = "${ R = lru }_cache"
##Cache size (in chunks)
**.C =  10^2



#####################################################################
########################  Statistics ################################
#####################################################################
##Time window for the stability checking
**.window = 60
##Sampling hit_rate time 
**.ts = 0.1
##Ex: in this case every 60 secs the engine checks for the stabilization. Every 0.1 sec a sample is collected. Thus, the stabilization is checked every 60/0.1=600 samples.
##Number of nodes to be full (-1 defaults to *all* nodes) for starting statistic collections
**.partial_n = -1

##Time of simulation after the stabilization
**.steady = 3600/2


output-vector-file = ${resultdir}/${net}/F-${F}/D-${D}/R-${R}/alpha-${a}/ccn-id${rep}.vec 
output-scalar-file = ${resultdir}/${net}/F-${F}/D-${D}/R-${R}/alpha-${a}/ccn-id${rep}.sca
