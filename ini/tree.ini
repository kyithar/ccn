#General paramteters
[General]
network = networks.${net=tree_6_2}_network
seed-set = ${rep = 0}

##Some parameters are fixed within the tree_6_2.ned file 
##Arriva rate of each timer
**.lambda = 1
##Timer indicating that a given content is not downloaded (>> N_D*d, where N_D is the network diameter, and d is the average delay on a link)
**.RTT = 2
##Timer indicating how often checking for a given content download
**.check_time = 0.1


#####################################################################
###################  Content Distribution ###########################
#####################################################################
##Average size of  a content (in chunks)
**.file_size =  1
##Shaping factor of the Zipf distribution
**.alpha = ${a = 1}
##Plateau of the MZipf distribution
**.q = 0
##Cardinality of the catalog
**.objects = 10^4

#####################################################################
##########################  Forwarding ##############################
#####################################################################
##Strategy layer (interest forwarding): 
## - spr: send interests toward the closest repository (in terms of hop count)[comcom,techrep]
## - nrr1: exploration + exploitation with cut off K[icn2012]
## - inrr: exploration + exploitation with cut off K[icn2012]
## - random_repository: send interests toward one randomly chosen repository among those which store the given chunk[comcom,techrep]
## - parallel_repository: send interests toward all the repositories which store the given chunk[comcom,techrep]
**.FS = "${F = spr }"
**.TTL2 = ${ttl = 1000}
**.TTL1= ${ttl}
**.routing_file = ""

#####################################################################
##########################  Caching  ################################
#####################################################################
##Caching meta-algorithms: fixP, lce , no_cache , lcd, btw, prob_cache
**.DS = "${ D = lce }"
##Caching algorithms: {lru,lfu,fifo,two,random}_cache
**.RS = "${ R = lru }_cache"
##Cache size (in chunks)
**.C =  10^2



#####################################################################
########################  Statistics ################################
#####################################################################
##Time window for the stability checking
**.window = 60
##Sampling hit_rate time 
**.ts = 0.1
##Ex: in this case every 60 secs the engine checks for the stabilization. Every 0.1 sec a sample is collected. Thus, the stabilization is checked every 60/0.1=600 samples.
##Number of nodes to be full (-1 defaults to *all* nodes) for starting statistic collections
**.partial_n = -1

##Time of simulation after the stabilization
**.steady = 3600/2


output-vector-file = ${resultdir}/${net}/F-${F}/D-${D}/R-${R}/alpha-${a}/ccn-id${rep}.vec 
output-scalar-file = ${resultdir}/${net}/F-${F}/D-${D}/R-${R}/alpha-${a}/ccn-id${rep}.sca
